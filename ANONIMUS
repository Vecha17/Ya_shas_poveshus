________________________________________________________________________________________________ test_post _________________________________________________________________________________________________ 

published_category = <Category: Pull Perhaps American Think Degree Strategy>, published_location = <Location: Abigail Ochoa MD>, user_client = <django.test.client.Client object at 0x000001D05D72E9D0>      
another_user_client = <django.test.client.Client object at 0x000001D05D72E7F0>, unlogged_client = <django.test.client.Client object at 0x000001D05D1DFC40>
comment_to_a_post = <Comment: Charge rock board foreign wish. Mission executive project Republican above according.>
create_post_context_form_item = KeyVal(key='form', val=<PostForm bound=False, valid=False, fields=(is_published;title;text;pub_date;location;category;image)>), PostModel = <class 'blog.models.Post'>       
CommentModelAdapter = <class 'adapters.comment.CommentModelAdapter.<locals>._CommentModelAdapter'>, main_content_tester = <test_content.MainPostContentTester object at 0x000001D05D28F340>

    @pytest.mark.django_db(transaction=True)
    def test_post(
            published_category: Model,
            published_location: Model,
            user_client: django.test.Client,
            another_user_client: django.test.Client,
            unlogged_client: django.test.Client,
            comment_to_a_post: Model,
            create_post_context_form_item: Tuple[str, BaseForm],
            PostModel: Type[Model],
            CommentModelAdapter: CommentModelAdapterT,
            main_content_tester: MainPostContentTester
    ):
        _, ctx_form = create_post_context_form_item
    
        create_a_post_get_response = get_create_a_post_get_response_safely(
            user_client
        )

        response_on_created, created_items = _test_create_items(
            PostModel,
            PostModelAdapter,
            another_user_client,
            create_a_post_get_response,
            ctx_form,
            published_category,
            published_location,
            unlogged_client,
            user_client,
        )

        # checking images are visible on post creation
        created_content = response_on_created.content.decode('utf-8')
        img_count = created_content.count('<img')
        expected_img_count = main_content_tester.n_or_page_size(len(created_items))
        assert img_count >= expected_img_count, (
            'Убедитесь, что при создании публикации она отображается с картинкой.'
        )

        edit_response, edit_url, del_url = _test_edit_post(
            CommentModelAdapter,
            another_user_client,
            comment_to_a_post,
            unlogged_client=unlogged_client,
            user_client=user_client,
        )

        item_to_delete_adapter = PostModelAdapter(
            CommentModelAdapter(comment_to_a_post).post
        )
        del_url_addr = del_url.key

        del_unexisting_status_404_err_msg = (
            "Убедитесь, что при обращении к странице удаления "
            " несуществующего поста возвращается статус 404."
        )
        delete_tester = DeletePostTester(
            item_to_delete_adapter.item_cls,
            user_client,
            another_user_client,
            unlogged_client,
            item_adapter=item_to_delete_adapter,
        )
>       delete_tester.test_delete_item(
            qs=item_to_delete_adapter.item_cls.objects.all(),
            delete_url_addr=del_url_addr,
        )

tests\test_post.py:135:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
tests\form\delete_tester.py:77: in test_delete_item
    can_delete, response = self.user_can_delete(
tests\form\delete_tester.py:114: in user_can_delete
    response = submitter.test_submit(url=delete_url, data={})
tests\form\base_form_tester.py:448: in test_submit
    response = self.client.post(url, data=data, follow=True)
venv\lib\site-packages\django\test\client.py:751: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
venv\lib\site-packages\django\test\client.py:407: in post
    return self.generic('POST', path, post_data, content_type,
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\generic\base.py:70: in view
    return self.dispatch(request, *args, **kwargs)
blogicum\blog\views.py:82: in dispatch
    get_object_or_404(Post, pk=kwargs['post_id'], author=request.user)
venv\lib\site-packages\django\shortcuts.py:76: in get_object_or_404
    return queryset.get(*args, **kwargs)
venv\lib\site-packages\django\db\models\query.py:424: in get
    clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
venv\lib\site-packages\django\db\models\query.py:941: in filter
    return self._filter_or_exclude(False, args, kwargs)
venv\lib\site-packages\django\db\models\query.py:961: in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
venv\lib\site-packages\django\db\models\query.py:968: in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
venv\lib\site-packages\django\db\models\sql\query.py:1416: in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
venv\lib\site-packages\django\db\models\sql\query.py:1435: in _add_q
    child_clause, needed_inner = self.build_filter(
venv\lib\site-packages\django\db\models\sql\query.py:1343: in build_filter
    self.check_related_objects(join_info.final_field, value, join_info.opts)
venv\lib\site-packages\django\db\models\sql\query.py:1172: in check_related_objects
    for v in value:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

self = <SimpleLazyObject: <django.contrib.auth.models.AnonymousUser object at 0x000001D05D7286D0>>, args = ()

    def inner(self, *args):
        if self._wrapped is empty:
            self._setup()
>       return func(self._wrapped, *args)
E       TypeError: 'AnonymousUser' object is not iterable

venv\lib\site-packages\django\utils\functional.py:247: TypeError
